// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	user "be17/main/feature/user"

	mock "github.com/stretchr/testify/mock"
)

// UserData is an autogenerated mock type for the UserDataInterface type
type UserData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *UserData) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: input
func (_m *UserData) Insert(input user.Core) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(user.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: email, password
func (_m *UserData) Login(email string, password string) (user.Core, string, error) {
	ret := _m.Called(email, password)

	var r0 user.Core
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (user.Core, string, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) user.Core); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(user.Core)
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(email, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}


// SelectById provides a mock function with given fields: id
func (_m *UserData) SelectById(id int) (user.Core, error) {
	ret := _m.Called(id)

	var r0 user.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (user.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) user.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(user.Core)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, input
func (_m *UserData) Update(id string, input user.Core) error {
	ret := _m.Called(id, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, user.Core) error); ok {
		r0 = rf(id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserData interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserData creates a new instance of UserData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserData(t mockConstructorTestingTNewUserData) *UserData {
	mock := &UserData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
